{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description" : "AWS CloudFormation Template for VoteApp: Builds DynamoDB tables, an S3 bucket, and Lambda functions for use in a real-time voting application. ** This template creates multiple AWS resources. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters": {

    "S3BucketName": {
        "Description": "S3 bucket in which the static app will reside",
        "Type": "String",
        "MinLength": "3",
        "MaxLength": "63",
        "Default": "myvoteappbucket"
    },

    "LambdaS3Bucket" : {
        "Description" : "Name of S3 bucket where static site and Lambda function packages are stored.",
        "Type" : "String",
        "Default" : "awslambda-reference-architectures"
    },

    "LambdaReceiveS3Key" : {
        "Description" : "Name of S3 key for ZIP with Lambda function package that receives votes.",
        "Type" : "String",
        "Default" : "web-app/receive.zip"
    },

    "LambdaAggregateS3Key" : {
        "Description" : "Name of S3 key for ZIP with Lambda function package that aggregates votes.",
        "Type" : "String",
        "Default" : "web-app/aggregate.zip"
    },

    "VotesTableRead": {
        "Description": "Read capacity units for VoteApp DynamoDB table",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "4",
        "AllowedPattern": "[0-9]*",
        "Default": "1"
    },

    "VotesTableWrite": {
        "Description": "Write capacity units for VoteApp DynamoDB table",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "4",
        "AllowedPattern": "[0-9]*",
        "Default": "1"
    },

    "AggregatesTableRead": {
        "Description": "Read capacity units for VoteAppAggregates aggregates table",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "4",
        "AllowedPattern": "[0-9]*",
        "Default": "1"
    },

    "AggregatesTableWrite": {
        "Description": "Write capacity units for VoteAppAggregates aggregates table",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "4",
        "AllowedPattern": "[0-9]*",
        "Default": "1"
    }
  },

  "Resources": {
    "ApiGatewayResource": {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ApiGatewayRestApi" },
        "ParentId": { "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"] },
        "PathPart": "vote"
      }
    },
    "CloudWatchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "apigateway.amazonaws.com" ] },
            "Action": "sts:AssumeRole"
          }]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"]
      }
    },
    "ApiGatewayAccount": {
      "Type" : "AWS::ApiGateway::Account",
      "Properties" : {
        "CloudWatchRoleArn": { "Fn::GetAtt": ["CloudWatchRole", "Arn"] }
      }
    },
    "ApiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": { "Ref": "ApiGatewayRestApi" },
        "Description": "Production deployment",
        "StageName": "production"
      },
      "DependsOn": [
        "ApiGatewayRestApi",
        "ApiGatewayResource",
        "ApiGatewayMethod",
        "ApiGatewayLambdaPermission"
      ]
    },

    "ApiLoggableStage": {
      "DependsOn" : ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiGatewayDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "ApiGatewayRestApi"},
        "StageName": "prod_loggable"
      }
    },

    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "RESTful API endpoint",
        "Name": {
          "Fn::Join": [
            "",
            [
              "ApiGatewayRestApi-",
              { "Ref": "AWS::StackName" }
            ]
          ]
        }
      }
    },
    "ApiGatewayLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : [ "LambdaVoteFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref" : "AWS::Region" },
              ":",
              { "Ref" : "AWS::AccountId" },
              ":",
              { "Ref" : "ApiGatewayRestApi" },
              "/*/POST/vote"
            ]
          ]
        }
      }
    },
    "ApiGatewayMethod": {
      "DependsOn": ["LambdaVoteFunction","ApiGatewayRestApi"],
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ApiGatewayRestApi" },
        "ResourceId": { "Ref": "ApiGatewayResource" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                { "Ref" : "AWS::Region" },
                ":lambda:path/2015-03-31/functions/",
                { "Fn::GetAtt" : [ "LambdaVoteFunction", "Arn" ] },
                "/invocations"
              ]
            ]
          },
          "RequestTemplates": {
            "application/x-www-form-urlencoded": {"Fn::Join": [
              "\n",
              [
                "## convert x-www-form-urlencoded to JSON",
                "##",
                "{",
                "  #foreach( $token in $input.path('$').split('&') )",
                "    #set( $keyVal = $token.split('=') )",
                "    #set( $keyValSize = $keyVal.size() )",
                "    #if( $keyValSize >= 1 )",
                "      #set( $key = $util.urlDecode($keyVal[0]) )",
                "      #if( $keyValSize >= 2 )",
                "        #set( $val = $util.urlDecode($keyVal[1]) )",
                "      #else",
                "        #set( $val = '' )",
                "      #end",
                "      \"$key\": \"$val\"#if($foreach.hasNext),#end",
                "    #end",
                "  #end",
                "}"
              ]]
            }
          }
        }
      }
    },
    "OptionsApiMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ApiGatewayRestApi" },
        "ResourceId": { "Ref": "ApiGatewayResource" },
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": 200 }"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters" : {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters" : {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },        
    "LambdaCallableFromApiGatewayPolicy": {
        "Type": "AWS::IAM::ManagedPolicy",
        "Properties": {
            "Description": "Managed Policy for API Gateway Lambda function",
            "Path": "/lambda/apigateway/",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "apigateway:*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iam:PassRole",
                            "iam:GetServerCertificate"
                        ],
                        "Resource": "*"
                    }
                ]
            }
        }
    },
    "DynamoDBTable": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "VotedFor",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [
            {
              "AttributeName": "VotedFor",
              "KeyType": "HASH"
            }
          ],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": {
              "Ref": "VotesTableRead"
            },
            "WriteCapacityUnits": {
              "Ref": "VotesTableWrite"
            }
          },
          "TableName": "VoteApp"
        }
    },

    "DynamoDBAggregatesTable": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "VotedFor",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [
            {
              "AttributeName": "VotedFor",
              "KeyType": "HASH"
            }
          ],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": {
              "Ref": "AggregatesTableRead"
            },
            "WriteCapacityUnits": {
              "Ref": "AggregatesTableWrite"
            }
          },
          "TableName": "VoteAppAggregates"
        }
    },

    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "PublicRead",
        "BucketName": {
          "Ref": "S3BucketName"
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "error.html"
        }
      }
    },

    "BucketPolicy" : {
        "Type" : "AWS::S3::BucketPolicy",
        "Properties" : {
          "PolicyDocument" : {
              "Id" : "S3BucketPolicy",
              "Version": "2012-10-17",
              "Statement": [
                  {
                    "Sid": "PublicReadForGetBucketObjects",
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "*"
                    },
                    "Action": "s3:GetObject",
                    "Resource" : { "Fn::Join" : [
                        "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" } , "/*" ]
                    ] }
                  }
              ]
          },
          "Bucket" : { "Ref" : "S3Bucket" }
        }
    },

    "LambdaVoteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaS3Bucket"
          },
          "S3Key": {
              "Ref": "LambdaReceiveS3Key"
          }
        },
        "Runtime": "nodejs4.3",
        "Description": "Receives votes from Twilio and adds to DynamoDB",
        "Handler": "app.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecDynamoRole",
            "Arn"
          ]
        },
        "Timeout": "30"
      }
    },

    "LambdaAggregateFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaS3Bucket"
          },
          "S3Key": {
            "Ref": "LambdaAggregateS3Key"
          }
        },
        "Runtime": "nodejs4.3",
        "Description": "Receives updated items from DynamoDB streams for aggregation",
        "Handler": "app.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecDynamoRole",
            "Arn"
          ]
        },
        "Timeout": "30"
      }
    },

    "LambdaExecDynamoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "lambda_exec_role_voteapp",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },

  "Outputs": {

    "WebsiteURL": {
      "Description": "URL for static website hosted on S3",
      "Value": {
        "Fn::GetAtt": [
          "S3Bucket",
          "WebsiteURL"
        ]
      }
    },

    "S3BucketSecureURL": {
      "Description": "Name of S3 bucket hosting content",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "S3Bucket",
                "DomainName"
              ]
            }
          ]
        ]
      }
    }
  }
}
